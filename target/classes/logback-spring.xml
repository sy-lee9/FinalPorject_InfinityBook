<?xml version="1.0" encoding="UTF-8"?>

<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">    
	<!-- 로그 파일이 저장될 경로 -->
    <property name="LOG_PATH" value="/logs"/>
    <!-- 로그 파일 이름 -->
    <property name="LOG_FILE_NAME" value="logFile"/>
	<!-- 패턴 등록 -->
	<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
    <!-- 로그 레벨 -->
    <property name="LOG_LEVEL" value="info"/>
    
	<!-- Appenders :  CONSOLE -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">	
		<!-- 출력 패턴 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern> 		
		</encoder>
	</appender>	
	
    <!-- Appenders :  FILE -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일 경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <!-- 출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 로그 파일 최대 보관 크기. 최대 크기를 초과하면 가장 오래된 로그 자동 제거 -->
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
    </appender>
			
	<!-- SQL LOG 옵션 설정 (쿼리문과 걸린시간, 결과를 보도록 한다.)-->	
	<logger name="jdbc.connection" level="OFF"/>
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="INFO"/>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="INFO"/>	

   	<!-- Root Logger -->
	<root>        
		<!-- 위에 설정한 파일 설정 추가 -->
        <appender-ref ref="file"/>
		<appender-ref ref="console" />
	</root>
    
</configuration>